import express from 'express';
import cors from 'cors';
import helmet from 'helmet';
import path from 'node:path';
import fs from 'node:fs';

const app = express();

// ðŸŸ¢ Step 1: Health endpoints FIRST
app.get('/healthz', (_req, res) => {
  res.json({ ok: true, ts: new Date().toISOString() });
});

app.get('/healthz/ready', (_req, res) => {
  res.send('OK');
});

// Middlewares (security, JSON parser, etc.)
app.use(helmet());
app.use(cors());
app.use(express.json());

  // ðŸŸ¢ Step 2: Serve client build (prefer client/client-dist)
  const CANDIDATES = [
    // when running from /server with tsx
    path.resolve(__dirname, '..', 'client', 'client-dist'),
    // when running from project root
    path.join(process.cwd(), 'client', 'client-dist'),
    // fallbacks (older layouts)
    path.join(process.cwd(), 'client-dist'),
    path.join(process.cwd(), 'public'),
  ];

  console.log('[startup] UI candidates:');
  for (const c of CANDIDATES) {
    const ok = fs.existsSync(path.join(c, 'index.html'));
    console.log('  ->', c, ok ? '(index.html found)' : '(missing)');
  }

  const UI_DIR = CANDIDATES.find(c => fs.existsSync(path.join(c, 'index.html')));

  if (UI_DIR) {
    console.log('[startup] Serving client from:', UI_DIR);
    app.use(express.static(UI_DIR));

    // Serve "/" explicitly (so "Cannot GET /" never happens)
    app.get('/', (_req, res) => res.sendFile(path.join(UI_DIR, 'index.html')));

    // SPA fallback (donâ€™t intercept API/health)
    app.get('*', (req, res, next) => {
      if (req.path.startsWith('/api') || req.path.startsWith('/healthz')) return next();
      res.sendFile(path.join(UI_DIR, 'index.html'));
    });
  } else {
    console.log('[startup] client build not found â€” skipping static hosting');
    app.get('/', (_req, res) => res.status(503).send('UI not built'));
  }
  // Catch-all: send index.html for non-API, non-health routes
  app.get('*', (req, res, next) => {
    if (req.path.startsWith('/api') || req.path.startsWith('/healthz')) {
      return next();
    }
    res.sendFile(path.join(CLIENT_DIR, 'index.html'));
  });
} else {
  console.log('[startup] client-dist not found â€” skipping static hosting');
}

// Start server
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`ðŸš€ Server running on port ${PORT}`);
});